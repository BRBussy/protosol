package generate

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

// Service generates a service client using the BaseGRPCClient pattern with rich configuration options
func Service(p *protogen.Plugin, f *protogen.File, svc *protogen.Service) error {
	// generate a new go file for the service
	g := p.NewGeneratedFile(
		generateFilename(f.Desc.Path(), "_service"),
		f.GoImportPath,
	)

	// service interface and struct names
	serviceInterfaceName := svc.GoName + "ServiceClientInterface"
	serviceStructName := strings.ToLower(string(svc.GoName[0])) + svc.GoName[1:] + "Service"
	constructorName := "New" + svc.GoName + "Service"

	// add header
	g.P("// Code generated by protoc-gen-passivgo. DO NOT EDIT.")
	g.P("// source: ", f.Desc.Path())
	g.P("package ", f.GoPackageName)
	g.P()

	// Generate comprehensive service interface with documentation
	g.P("// ", serviceInterfaceName, " is a gRPC service for the ", svc.GoName, " service.")
	g.P("// It combines the service interface with resource management capabilities using")
	g.P("// the common BaseGRPCClient for consistent authentication, timeouts, and tracing.")
	g.P("//")
	g.P("// Basic service usage with default configuration:")
	g.P("//")
	g.P("//\tservice, err := ", constructorName, "()")
	g.P("//\tif err != nil {")
	g.P("//\t\tlog.Fatal(err)")
	g.P("//\t}")
	g.P("//\tdefer service.Close() // ensures proper cleanup of underlying connection")
	g.P("//")
	g.P("// With default configuration API credentials are searched for using the standard discovery hierarchy:")
	g.P("//")
	g.P("// 1. PROTOSOL_API_CREDENTIALS environment variable")
	g.P("//")
	g.P("// 2. Default credential file location:")
	g.P("//")
	g.P("//   - Linux:   $XDG_CONFIG_HOME/protosol/credentials.json or fallback to $HOME/.config/protosol/credentials.json")
	g.P("//   - macOS:   $HOME/Library/Application Support/protosol/credentials.json")
	g.P("//   - Windows: C:\\\\Users\\\\<user>\\\\AppData\\\\Roaming\\\\protosol\\\\credentials.json")
	g.P("//")
	g.P("// The service may also be configured with custom options:")
	g.P("//")
	g.P("//\tservice, err := ", constructorName, "(")
	g.P("//\t\tapi.WithURL(\"api.example.com:443\"),")
	g.P("//\t\tapi.WithAPIKey(\"your-api-key\"),")
	g.P("//\t\tapi.WithTimeout(30 * time.Second),")
	g.P("//\t\tapi.WithTLS(true),")
	g.P("//\t)")
	g.P("//\tif err != nil {")
	g.P("//\t\tlog.Fatal(err)")
	g.P("//\t}")
	g.P("//\tdefer service.Close() // ensures proper cleanup of underlying connection")
	g.P("type ", serviceInterfaceName, " interface {")
	g.P("\t", svc.GoName, "Interface")
	g.P("\t", APIPkg.Ident("GRPCClient"))
	g.P("}")
	g.P()

	// Generate service struct that embeds BaseGRPCClient
	g.P("// ", serviceStructName, " is the internal implementation of the ", serviceInterfaceName, " interface.")
	g.P("// It embeds BaseGRPCClient to provide all common gRPC functionality including validation.")
	g.P("type ", serviceStructName, " struct {")
	g.P("\t*", APIPkg.Ident("BaseGRPCClient"), "[", svc.GoName, "Client]")
	g.P("}")
	g.P()

	// Add interface implementation check
	g.P("// ensure ", serviceStructName, " implements the ", serviceInterfaceName, " interface")
	g.P("var _ ", serviceInterfaceName, " = &", serviceStructName, "{}")
	g.P()

	// Generate constructor with rich documentation
	g.P("// ", constructorName, " creates and initializes the ", svc.GoName, " service.")
	g.P("// The service uses the common BaseGRPCClient for all functionality including")
	g.P("// connection management, authentication, timeouts, and distributed tracing.")
	g.P("//")
	g.P("// With default configuration API credentials are searched for using the standard discovery hierarchy:")
	g.P("//")
	g.P("// 1. PROTOSOL_API_CREDENTIALS environment variable")
	g.P("//")
	g.P("// 2. Default credential file location:")
	g.P("//")
	g.P("//   - Linux:   $XDG_CONFIG_HOME/protosol/credentials.json or fallback to $HOME/.config/protosol/credentials.json")
	g.P("//   - macOS:   $HOME/Library/Application Support/protosol/credentials.json")
	g.P("//   - Windows: C:\\\\Users\\\\<user>\\\\AppData\\\\Roaming\\\\protosol\\\\credentials.json")
	g.P("//")
	g.P("// Examples:")
	g.P("//")
	g.P("//\t// Create with default configuration")
	g.P("//\tservice, err := ", constructorName, "()")
	g.P("//\tif err != nil {")
	g.P("//\t\tlog.Fatal(err)")
	g.P("//\t}")
	g.P("//\tdefer service.Close()")
	g.P("//")
	g.P("//\t// Create with custom configuration")
	g.P("//\tservice, err := ", constructorName, "(")
	g.P("//\t\tapi.WithURL(\"api.example.com:443\"),")
	g.P("//\t\tapi.WithAPIKey(\"your-api-key\"),")
	g.P("//\t\tapi.WithTLS(true),")
	g.P("//\t)")
	g.P("//\tif err != nil {")
	g.P("//\t\tlog.Fatal(err)")
	g.P("//\t}")
	g.P("//\tdefer service.Close()")
	g.P("//")
	g.P("// Parameters:")
	g.P("//   - opts: Functional options to configure the client")
	g.P("//")
	g.P("// Returns:")
	g.P("//   - ", serviceInterfaceName, ": Configured service instance")
	g.P("//   - error: Configuration or connection error")
	g.P("func ", constructorName, "(opts ...", APIPkg.Ident("ServiceOption"), ") (", serviceInterfaceName, ", error) {")
	g.P("\tbase, err := ", APIPkg.Ident("NewBaseGRPCClient"), "(")
	g.P("\t\t", svc.GoName, "ServiceProviderName,")
	g.P("\t\tNew", svc.GoName, "Client,")
	g.P("\t\topts...,")
	g.P("\t)")
	g.P("\tif err != nil {")
	g.P("\t\treturn nil, err")
	g.P("\t}")
	g.P()
	g.P("\treturn &", serviceStructName, "{BaseGRPCClient: base}, nil")
	g.P("}")
	g.P()

	// Generate method implementations with the Execute pattern
	for i, method := range svc.Methods {
		g.P("// ", method.GoName, " executes the ", method.GoName, " RPC method with automatic")
		g.P("// client-side validation, timeout handling, distributed tracing, and authentication.")
		g.P("func (s *", serviceStructName, ") ", method.GoName, "(ctx ", ContextPkg.Ident("Context"), ", request *", method.Input.GoIdent, ") (*", method.Output.GoIdent, ", error) {")
		g.P("\treturn ", APIPkg.Ident("Execute"), "(s.Executor(), ctx, \"", method.GoName, "\", request, func(ctx ", ContextPkg.Ident("Context"), ") (*", method.Output.GoIdent, ", error) {")
		g.P("\t\treturn s.GrpcClient().", method.GoName, "(ctx, request)")
		g.P("\t})")
		g.P("}")

		// add space between methods (but not after the last)
		if i != len(svc.Methods)-1 {
			g.P()
		}
	}

	return nil
}
