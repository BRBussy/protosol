package generate

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

// ServiceInterface generates a clean Go interface for a protobuf service
func ServiceInterface(p *protogen.Plugin, f *protogen.File, svc *protogen.Service) error {
	// generate a new go file for the clean service interface
	g := p.NewGeneratedFile(
		generateFilename(f.Desc.Path(), "_interface"),
		f.GoImportPath,
	)

	// add header
	g.P("// Code generated by protoc-gen-passivgo. DO NOT EDIT.")
	g.P("// source: ", f.Desc.Path())
	g.P("package ", f.GoPackageName)
	g.P()

	// Add interface comments
	if len(svc.Comments.Leading) > 0 {
		for _, comment := range strings.Split(strings.TrimSpace(svc.Comments.Leading.String()), "\n") {
			trimmedComment := strings.TrimSpace(comment)
			if trimmedComment != "" {
				g.P(trimmedComment)
			}
		}
	}

	// Start the interface
	g.P("type ", svc.GoName, "Interface interface {")

	// add methods in the interface
	for i, method := range svc.Methods {
		// Add method comments
		if len(method.Comments.Leading) > 0 {
			for _, comment := range strings.Split(strings.TrimSpace(method.Comments.Leading.String()), "\n") {
				trimmedComment := strings.TrimSpace(comment)
				if trimmedComment != "" {
					g.P("\t", trimmedComment)
				}
			}
		}

		// Check if this is a server streaming method
		if method.Desc.IsStreamingServer() {
			// Generate streaming interface method signature (gRPC uses value type, not pointer)
			g.P("\t", method.GoName, "(ctx ", ContextPkg.Ident("Context"), ", request *", method.Input.GoIdent, ", stream ", GRPCPkg.Ident("ServerStreamingServer"), "[", method.Output.GoIdent, "]) error")
		} else {
			// Generate regular unary interface method signature
			g.P("\t", method.GoName, "(ctx ", ContextPkg.Ident("Context"), ", request *", method.Input.GoIdent, ") (*", method.Output.GoIdent, ", error)")
		}

		// add spaces between methods
		if i != len(svc.Methods)-1 {
			g.P()
		}
	}

	// end the interface
	g.P("}")
	g.P()

	// process package name to generate service provider name constant
	if f.Proto.Package == nil {
		return fmt.Errorf("proto package name is not set")
	}
	packageName := strings.ReplaceAll(*f.Proto.Package, ".", "-")

	// Generate the service provider name constant
	g.P("const ", svc.GoName, "ServiceProviderName = ", fmt.Sprintf("\"%s-%s\"", packageName, svc.GoName))
	g.P()

	return nil
}

// generateFilename converts a .proto file name into a new name to be used when generating go files
func generateFilename(filename, suffix string) string {
	// remove .proto from filename
	filename = strings.TrimSuffix(filename, ".proto")

	// keep the full path to match protobuf generation
	return filename + suffix + ".passivgo.go"
}
